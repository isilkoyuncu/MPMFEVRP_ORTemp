using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MPMFEVRP.Domains.ProblemDomain;
using MPMFEVRP.Domains.SolutionDomain;
using MPMFEVRP.Models.CustomerSetSolvers.Interfaces_and_Bases;
using MPMFEVRP.Implementations.ProblemModels.Interfaces_and_Bases;
using MPMFEVRP.Domains.AlgorithmDomain;
using System.Diagnostics;
using MPMFEVRP.Utils;

namespace MPMFEVRP.Models.CustomerSetSolvers
{
    /// <summary>
    /// This class implements the flow chart in the second paper. AFV solver exploits the GDV optimal routes to speed up the process.
    /// </summary>
    public class CustomerSetSolver_Homogeneous_ExploitingVirtualGDVs : ICustomerSetSolver
    {
        readonly EVvsGDV_ProblemModel theProblemModel;
        readonly Vehicle theAFV;
        readonly Vehicle theGDV;
        readonly CustomerSetSolverWithOnlyAFV AFV_Solver;
        readonly CustomerSetSolverWithOnlyGDV GDV_Solver;
        //readonly CustomerSetSolverWithOnlyAFV AFV_SolutionChecker;
        Stopwatch stopwatch = new Stopwatch();
        double t0GDVSoln = 0.0; //public double T0GDVSoln => t0GDVSoln;
        double t1CheckAFVfeas = 0.0; //public double T1CheckAFVfeas => t1CheckAFVfeas;
        double t2CheckAFVinfeas = 0.0; //public double T2CheckAFVinfeas => t2CheckAFVinfeas;
        double t3RefuelingPathInsert = 0.0; //public double T3RefuelingPathInsert => t3RefuelingPathInsert;
        double t4SwapAndInsert = 0.0; //public double T4SwapAndInsert => t4SwapAndInsert;
        double t5AFVSoln = 0.0; //public double T5AFVSoln => t5AFVSoln;
        int stopAfter = 5;

        public OptimizationStatistics optimizationStatstics;

        public CustomerSetSolver_Homogeneous_ExploitingVirtualGDVs(EVvsGDV_ProblemModel theProblemModel)
        {
            this.theProblemModel = theProblemModel;
            theAFV = theProblemModel.VRD.GetTheVehicleOfCategory(VehicleCategories.EV);
            theGDV = theProblemModel.VRD.GetTheVehicleOfCategory(VehicleCategories.GDV);

            AFV_Solver = new CustomerSetSolverWithOnlyAFV(theProblemModel);
            GDV_Solver = new CustomerSetSolverWithOnlyGDV(theProblemModel);
        }
        public RouteOptimizationOutcome Solve(CustomerSet customerSet, bool PreserveCustomerVisitSequence, bool feasibleAFVSolnIsEnough, bool performSwap)
        {
            RouteOptimizationOutcome outcome = new RouteOptimizationOutcome();
            int nCustomers = customerSet.Customers.Count;
            List<string> customers = customerSet.Customers;
            t0GDVSoln = 0.0;
            t1CheckAFVfeas = 0.0;
            t2CheckAFVinfeas = 0.0;
            t3RefuelingPathInsert = 0.0;
            t4SwapAndInsert = 0.0;
            t5AFVSoln = 0.0;

            VehicleSpecificRouteOptimizationOutcome vsroo_GDV;
            VehicleSpecificRouteOptimizationOutcome vsroo_AFV;
            
            //first solve with gdv
            stopwatch.Start();
            GDV_Solver.Solve(customerSet);
            t0GDVSoln = stopwatch.Elapsed.TotalSeconds;
            stopwatch.Restart();
            //check solution if infeasible, 
            if (GDV_Solver.SolutionStatus == XCPlexSolutionStatus.Infeasible)
            {
                vsroo_GDV = new VehicleSpecificRouteOptimizationOutcome(theGDV.Category, GDV_Solver.CPUtime, VehicleSpecificRouteOptimizationStatus.Infeasible);
                vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, t0GDVSoln, VehicleSpecificRouteOptimizationStatus.Infeasible);
                outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.InfeasibleForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                stopAfter = 0;
                optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas,t2CheckAFVinfeas,t3RefuelingPathInsert,t4SwapAndInsert,t5AFVSoln,stopAfter);
                return outcome;
            }
            //return infeasible roo
            else if (GDV_Solver.SolutionStatus == XCPlexSolutionStatus.Optimal)
            {
                //check afv-feasibility of the gdv-optimal route
                VehicleSpecificRoute vsr_GDV = GDV_Solver.GetVehicleSpecificRoutes(VehicleCategories.GDV).First();
                vsroo_GDV = new VehicleSpecificRouteOptimizationOutcome(theGDV.Category, GDV_Solver.CPUtime, VehicleSpecificRouteOptimizationStatus.Optimized, vsr_GDV);
                bool afvFeasOfGDVoptSoln = theProblemModel.CheckAFVFeasibilityOfGDVOptimalRoute(vsr_GDV);
                t1CheckAFVfeas = stopwatch.Elapsed.TotalSeconds;
                stopwatch.Restart();
                if (afvFeasOfGDVoptSoln)
                {
                    stopAfter = 1;
                    VehicleSpecificRoute vsr_AFV = new VehicleSpecificRoute(theProblemModel, theAFV, vsr_GDV.ListOfVisitedNonDepotSiteIDs);
                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas), VehicleSpecificRouteOptimizationStatus.Optimized, vsr_AFV);
                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                    optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                    return outcome;
                }
                else //GDV-optimal route is not feasible for AFV
                {
                    AFVInfOfCustomerSet ProveAFVInfeasibilityOfCS = theProblemModel.ProveAFVInfeasibilityOfCustomerSet(vsr_GDV);
                    t2CheckAFVinfeas = stopwatch.Elapsed.TotalSeconds;
                    stopwatch.Restart();
                    if (ProveAFVInfeasibilityOfCS == AFVInfOfCustomerSet.AFVInfeasibilityOfCSProved)
                    {
                        stopAfter = 2;
                        vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas), VehicleSpecificRouteOptimizationStatus.Infeasible);
                        outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForGDVButInfeasibleForEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                        optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);                 
                        return outcome;
                    }
                    else // AFV-infeasibility of the customer set cannot be proved, yet :)
                    {
                        if (performSwap)
                        {
                            vsroo_AFV = GetVehicleSpecificRouteBySwapAndInsertES(vsr_GDV, theProblemModel, feasibleAFVSolnIsEnough);
                            if (vsroo_AFV.Status == VehicleSpecificRouteOptimizationStatus.Optimized)
                            {
                                stopwatch.Restart();
                                AFV_Solver.Solve(customerSet, false, vsr_GDV);
                                VehicleSpecificRoute solver_vsr = AFV_Solver.GetVehicleSpecificRoutes(theAFV.Category).First();
                                t5AFVSoln = stopwatch.Elapsed.TotalSeconds;
                                if (vsroo_AFV.VSOptimizedRoute.GetVehicleMilesTraveled() - solver_vsr.GetVehicleMilesTraveled() > 0.00001)
                                {
                                    stopAfter = 5;
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });                                   
                                }
                                else
                                {
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Optimized, solver_vsr);
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                }
                                optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                                return outcome;
                            }
                            else
                            {
                                stopwatch.Restart();
                                AFV_Solver.Solve(customerSet, false, vsr_GDV);
                                t5AFVSoln = stopwatch.Elapsed.TotalSeconds;

                                if (AFV_Solver.SolutionStatus == XCPlexSolutionStatus.Optimal)
                                {
                                    VehicleSpecificRoute vsr_AFV = AFV_Solver.GetVehicleSpecificRoutes(theAFV.Category).First();
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Optimized, vsr_AFV);
                                    stopAfter = 5;
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                    optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                                    return outcome;
                                }
                                else
                                {
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Infeasible);
                                    stopAfter = 5;
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForGDVButInfeasibleForEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                    optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                                    return outcome;
                                }
                            }
                        }
                        else
                        {
                            stopwatch.Restart();
                            AFV_Solver.Solve(customerSet, PreserveCustomerVisitSequence, vsr_GDV);
                            if (AFV_Solver.SolutionStatus == XCPlexSolutionStatus.Optimal)
                            {
                                VehicleSpecificRoute vsr_AFV = AFV_Solver.GetVehicleSpecificRoutes(theAFV.Category).First();
                                t3RefuelingPathInsert = stopwatch.Elapsed.TotalSeconds;
                                stopwatch.Restart();
                                AFV_Solver.Solve(customerSet, false, vsr_GDV);
                                VehicleSpecificRoute unrestricted_vsr_AFV = AFV_Solver.GetVehicleSpecificRoutes(theAFV.Category).First();
                                t5AFVSoln = stopwatch.Elapsed.TotalSeconds;
                                stopwatch.Reset();
                                if (vsr_AFV.GetVehicleMilesTraveled() - unrestricted_vsr_AFV.GetVehicleMilesTraveled() >= 0.00001)
                                {
                                    stopAfter = 3;
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Optimized, vsr_AFV);

                                }
                                else
                                {
                                    stopAfter = 5;
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Optimized, unrestricted_vsr_AFV);
                                }
                                outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                                return outcome;
                            }
                            else
                            {
                                stopwatch.Restart();                           
                                AFV_Solver.Solve(customerSet, false, vsr_GDV);
                                t5AFVSoln = stopwatch.Elapsed.TotalSeconds;
                                if (AFV_Solver.SolutionStatus == XCPlexSolutionStatus.Optimal)
                                {
                                    VehicleSpecificRoute vsr_AFV = AFV_Solver.GetVehicleSpecificRoutes(theAFV.Category).First();
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Optimized, vsr_AFV);
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForBothGDVandEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                }
                                else
                                {
                                    vsroo_AFV = new VehicleSpecificRouteOptimizationOutcome(theAFV.Category, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert + t5AFVSoln), VehicleSpecificRouteOptimizationStatus.Infeasible);
                                    outcome = new RouteOptimizationOutcome(RouteOptimizationStatus.OptimizedForGDVButInfeasibleForEV, new List<VehicleSpecificRouteOptimizationOutcome>() { vsroo_GDV, vsroo_AFV });
                                }
                                optimizationStatstics = new OptimizationStatistics(nCustomers, outcome, customers, t0GDVSoln, t1CheckAFVfeas, t2CheckAFVinfeas, t3RefuelingPathInsert, t4SwapAndInsert, t5AFVSoln, stopAfter);
                                return outcome;
                            }
                        }
                    }
                }
            }
            else
                throw new System.Exception("The TSPsolverEV.SolutionStatus is neither infeasible nor optimal for vehicle category: ");
        }

        VehicleSpecificRouteOptimizationOutcome GetVehicleSpecificRouteBySwapAndInsertES(VehicleSpecificRoute vsr_GDV, EVvsGDV_ProblemModel theProblemModel, bool feasibleAFVSolnIsEnough=false)
        {
            VehicleSpecificRoute best_vsr_afterInsert = vsr_GDV;
            int count = 0;
            List<VehicleSpecificRoute> vsr_AFV_list = new List<VehicleSpecificRoute>();
            List<string> sites = new List<string>();
            RefuelingPathList refuelingPaths = new RefuelingPathList();
            sites = vsr_GDV.ListOfVisitedSiteIncludingDepotIDs;
            List<string> tempSites = new List<string>(sites);

            string origin = "";
            string destination = "";
            string cs = "";
            DateTime s4 = DateTime.Now;
            for (int j = 1; j < sites.Count - 1; j++)
            {
                for (int i = 1; i < sites.Count; i++)
                {
                    tempSites = new List<string>(sites);
                    origin = sites[i - 1];
                    destination = sites[i];
                    foreach (RefuelingPath rp in theProblemModel.NonDominatedRefuelingPaths)
                    {
                        if (rp.Origin.ID == origin && rp.Destination.ID == destination && rp.GetRefuelingStopIDs().Count > 0)
                        {
                            tempSites.InsertRange(i, rp.GetRefuelingStopIDs());
                            tempSites.RemoveAt(0);
                            tempSites.RemoveAt(tempSites.Count - 1);
                            vsr_AFV_list.Add(new VehicleSpecificRoute(theProblemModel, theProblemModel.VRD.GetTheVehicleOfCategory(VehicleCategories.EV), tempSites));
                        }
                        tempSites = new List<string>(sites);
                    }
                }
                if (count == 0)
                {
                    t3RefuelingPathInsert = stopwatch.Elapsed.TotalSeconds;
                    best_vsr_afterInsert = new VehicleSpecificRoute(vsr_AFV_list.Last());
                    stopwatch.Restart();
                }
                if (feasibleAFVSolnIsEnough && vsr_AFV_list.Last().Feasible)
                {
                    break;
                }
                count++;
                if (sites.Count <= 4)
                    break;
                cs = sites[j];
                sites.RemoveAt(j);
                sites.Insert(j + 1, cs);
            }
            double obj = Double.MaxValue;
            VehicleSpecificRoute vsr_AFV = new VehicleSpecificRoute(vsr_AFV_list.First());
            foreach (VehicleSpecificRoute route in vsr_AFV_list)
            {
                if (route.Feasible && route.GetVehicleMilesTraveled() < obj)
                {
                    vsr_AFV = new VehicleSpecificRoute(route);
                    obj = route.GetVehicleMilesTraveled();
                }
            }
            if (count != 0)
                t4SwapAndInsert = stopwatch.Elapsed.TotalSeconds;

            if (vsr_AFV.Feasible)
            {
                if (best_vsr_afterInsert.GetVehicleMilesTraveled() - vsr_AFV.GetVehicleMilesTraveled() >= 0.00001)
                    stopAfter = 4;
                else
                    stopAfter = 3;
                return new VehicleSpecificRouteOptimizationOutcome(VehicleCategories.EV, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert), VehicleSpecificRouteOptimizationStatus.Optimized, vsOptimizedRoute: vsr_AFV);
            }
            else
            {
                return new VehicleSpecificRouteOptimizationOutcome(VehicleCategories.EV, (t0GDVSoln + t1CheckAFVfeas + t2CheckAFVinfeas + t3RefuelingPathInsert + t4SwapAndInsert), VehicleSpecificRouteOptimizationStatus.Infeasible);
            }
        }





    }
}
